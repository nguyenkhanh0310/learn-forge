"use strict";
/* tslint:disable */
/* eslint-disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = void 0;
const autodesk_sdkmanager_1 = require("@aps_sdk/autodesk-sdkmanager");
const common_1 = require("../common");
const base_1 = require("../base");
/**
 * UsersApi - axios parameter creator
 * @export
 */
const UsersApiAxiosParamCreator = function (apsConfiguration) {
    return {
        /**
         * Retrieves information about the authenticated user.
         * @summary Get User Info
         * @param authorization Three Legged access token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: (authorization_1, baseAddress_1, ...args_1) => __awaiter(this, [authorization_1, baseAddress_1, ...args_1], void 0, function* (authorization, baseAddress, options = {}) {
            const localVarPath = `/userinfo`;
            const localVarUrlObj = new URL(localVarPath, baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = authorization;
            }
            localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
            //  setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.toString(),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
const UsersApiFp = function (sdkManager) {
    const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(sdkManager.apsConfiguration);
    return {
        /**
         * Retrieves information about the authenticated user.
         * @summary Get User Info
         * @param {string} [authorization] YOUR_3_LEGGED_ACCESS_TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(authorization, baseAddress, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserInfo(authorization, baseAddress, options);
                return (0, common_1.createRequestFunctionforUserInfo)(localVarAxiosArgs, sdkManager);
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseApi}
 */
class UsersApi extends base_1.BaseApi {
    constructor() {
        super(...arguments);
        this.logger = this.sdkManager.logger;
        this.baseAddress = new URL("https://api.userprofile.autodesk.com");
    }
    /**
     * Retrieves information about the authenticated user.
     * @summary Get User Info
     * @param authorization bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserInfo(authorization, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logInfo("Entered into getUserInfo ");
            try {
                const request = yield (0, exports.UsersApiFp)(this.sdkManager).getUserInfo(authorization, this.baseAddress, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getUserInfo Request completed successfully with status code: ${response.status}`);
                return new autodesk_sdkmanager_1.ApiResponse(response, response.data);
            }
            catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getUserInfo Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new base_1.AuthenticationApiError(`getUserInfo Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                }
                else if (error.request) {
                    this.logger.logError(`getUserInfo Request failed with no response received: ${error.request}`);
                    throw new base_1.AuthenticationApiError(`getUserInfo Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
exports.UsersApi = UsersApi;
