import { SdkManager, ApiResponse, ApsServiceRequestConfig, IAuthenticationProvider } from "@aps_sdk/autodesk-sdkmanager";
import { IFileTransferConfigurations } from './fileTransferConfigurations';
import { ObjectsApi } from "../api";
import { Stream } from "stream";
export interface IOSSFileTransfer {
}
export declare class OSSFileTransfer implements IOSSFileTransfer {
    configuration: IFileTransferConfigurations;
    objectApi: ObjectsApi;
    private maxRetryOnTokenExpiry;
    private maxChunkCountAllowed;
    private maxRetryOnUrlExpiry;
    sdkManager: SdkManager;
    private logger;
    private readonly accessTokenExpiredMessage;
    private readonly forbiddenMessage;
    private authProvider;
    constructor(configuration: IFileTransferConfigurations, sdkmanager: SdkManager, authenticationProvider: IAuthenticationProvider);
    upload(bucketKey: string, objectKey: string, sourceToUpload: Buffer, accessToken: string, cancellationToken: AbortController, requestIdPrefix?: string, onProgress?: (percentCompleted: number) => void): Promise<ApiResponse>;
    protected uploadToURL(currentUrl: string, fileChunk: Buffer, accessToken: string, requestId: string, options?: ApsServiceRequestConfig): Promise<any>;
    download(bucketKey: string, objectKey: string, accessToken: string, filePath?: string, cancellationToken?: AbortController, requestIdPrefix?: string, onProgress?: (percentCompleted: number) => void): Promise<Stream | void>;
    private isFileSizeAllowed;
    private readFileBytes;
    private getUploadUrlsWithRetry;
    private calculateNumberOfChunks;
    private validateFileSize;
    private handleRequestId;
    private GenerateSdkRequestId;
    private getS3SignedDownloadUrlWithRetry;
    private validateProjectScopeName;
    private throwIfCancellationRequested;
    protected writeToFileStreamFromUrl(Url: string, start: number, end: number, requestId: any, options?: ApsServiceRequestConfig): Promise<NodeJS.ReadableStream>;
}
