"use strict";
/* tslint:disable */
/* eslint-disable */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketsApi = exports.BucketsApiFp = exports.BucketsApiAxiosParamCreator = void 0;
const autodesk_sdkmanager_1 = require("@aps_sdk/autodesk-sdkmanager");
const common_1 = require("../common");
const base_1 = require("../base");
/**
 * BucketsApi - axios parameter creator
 * @export
 */
const BucketsApiAxiosParamCreator = function (apsConfiguration) {
    return {
        /**
         * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
         * @summary Create Bucket
         * @param {CreateBucketsPayload} policyKey
         * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket: (accessToken_1, policyKey_1, xAdsRegion_1, ...args_1) => __awaiter(this, [accessToken_1, policyKey_1, xAdsRegion_1, ...args_1], void 0, function* (accessToken, policyKey, xAdsRegion, options = {}) {
            // verify required parameter 'policyKey' is not null or undefined
            (0, common_1.assertParamExists)('createBucket', 'policyKey', policyKey);
            const localVarPath = `/oss/v2/buckets`;
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, accessToken);
            if (xAdsRegion != null) {
                localVarHeaderParameter['x-ads-region'] = typeof xAdsRegion === 'string'
                    ? xAdsRegion
                    : JSON.stringify(xAdsRegion);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(policyKey, localVarRequestOptions, apsConfiguration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
         * @summary Delete Bucket
         * @param {string} bucketKey The bucket key of the bucket to delete.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket: (accessToken_1, bucketKey_1, ...args_1) => __awaiter(this, [accessToken_1, bucketKey_1, ...args_1], void 0, function* (accessToken, bucketKey, options = {}) {
            // verify required parameter 'bucketKey' is not null or undefined
            (0, common_1.assertParamExists)('deleteBucket', 'bucketKey', bucketKey);
            const localVarPath = `/oss/v2/buckets/{bucketKey}`
                .replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, accessToken);
            localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Get Bucket Details
         * @param {string} bucketKey The bucket key of the bucket to query.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketDetails: (accessToken_1, bucketKey_1, ...args_1) => __awaiter(this, [accessToken_1, bucketKey_1, ...args_1], void 0, function* (accessToken, bucketKey, options = {}) {
            // verify required parameter 'bucketKey' is not null or undefined
            (0, common_1.assertParamExists)('getBucketDetails', 'bucketKey', bucketKey);
            const localVarPath = `/oss/v2/buckets/{bucketKey}/details`
                .replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, accessToken);
            localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of buckets owned by the application.
         * @summary List Buckets
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets: (accessToken_1, region_1, limit_1, startAt_1, ...args_1) => __awaiter(this, [accessToken_1, region_1, limit_1, startAt_1, ...args_1], void 0, function* (accessToken, region, limit, startAt, options = {}) {
            const localVarPath = `/oss/v2/buckets`;
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, accessToken);
            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }
            localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.BucketsApiAxiosParamCreator = BucketsApiAxiosParamCreator;
/**
 * BucketsApi - functional programming interface
 * @export
 */
const BucketsApiFp = function (sdkManager) {
    const localVarAxiosParamCreator = (0, exports.BucketsApiAxiosParamCreator)(sdkManager.apsConfiguration);
    return {
        /**
         * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
         * @summary Create Bucket
         * @param {CreateBucketsPayload} policyKey
         * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBucket(accessToken, policyKey, xAdsRegion, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createBucket(accessToken, policyKey, xAdsRegion, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
         * @summary Delete Bucket
         * @param {string} bucketKey The bucket key of the bucket to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBucket(accessToken, bucketKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteBucket(accessToken, bucketKey, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Get Bucket Details
         * @param {string} bucketKey The bucket key of the bucket to query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBucketDetails(accessToken, bucketKey, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBucketDetails(accessToken, bucketKey, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns a list of buckets owned by the application.
         * @summary List Buckets
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuckets(accessToken, region, limit, startAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBuckets(accessToken, region, limit, startAt, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, sdkManager);
            });
        },
    };
};
exports.BucketsApiFp = BucketsApiFp;
/**
 * BucketsApi - object-oriented interface
 * @export
 * @class BucketsApi
 * @extends {BaseApi}
 */
class BucketsApi extends base_1.BaseApi {
    constructor() {
        super(...arguments);
        this.logger = this.sdkManager.logger;
    }
    /**
     * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
     * @summary Create Bucket
     * @param {CreateBucketsPayload} policyKey
     * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */
    createBucket(accessToken, policyKey, xAdsRegion, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logInfo("Entered into createBucket ");
            try {
                const request = yield (0, exports.BucketsApiFp)(this.sdkManager).createBucket(accessToken, policyKey, xAdsRegion, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`createBucket Request completed successfully with status code: ${response.status}`);
                return new autodesk_sdkmanager_1.ApiResponse(response, response.data);
            }
            catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`createBucket Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new base_1.OssApiError(`createBucket Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                }
                else if (error.request) {
                    this.logger.logError(`createBucket Request failed with no response received: ${error.request}`);
                    throw new base_1.OssApiError(`createBucket Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
     * @summary Delete Bucket
     * @param {string} bucketKey The bucket key of the bucket to delete.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */
    deleteBucket(accessToken, bucketKey, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logInfo("Entered into deleteBucket ");
            try {
                const request = yield (0, exports.BucketsApiFp)(this.sdkManager).deleteBucket(accessToken, bucketKey, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`deleteBucket Request completed successfully with status code: ${response.status}`);
                return new autodesk_sdkmanager_1.ApiResponse(response, response.data);
            }
            catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`deleteBucket Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new base_1.OssApiError(`deleteBucket Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                }
                else if (error.request) {
                    this.logger.logError(`deleteBucket Request failed with no response received: ${error.request}`);
                    throw new base_1.OssApiError(`deleteBucket Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
     * @summary Get Bucket Details
     * @param {string} bucketKey The bucket key of the bucket to query.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */
    getBucketDetails(accessToken, bucketKey, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logInfo("Entered into getBucketDetails ");
            try {
                const request = yield (0, exports.BucketsApiFp)(this.sdkManager).getBucketDetails(accessToken, bucketKey, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getBucketDetails Request completed successfully with status code: ${response.status}`);
                return new autodesk_sdkmanager_1.ApiResponse(response, response.data);
            }
            catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getBucketDetails Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new base_1.OssApiError(`getBucketDetails Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                }
                else if (error.request) {
                    this.logger.logError(`getBucketDetails Request failed with no response received: ${error.request}`);
                    throw new base_1.OssApiError(`getBucketDetails Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns a list of buckets owned by the application.
     * @summary List Buckets
     * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
     * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */
    getBuckets(accessToken, region, limit, startAt, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logInfo("Entered into getBuckets ");
            try {
                const request = yield (0, exports.BucketsApiFp)(this.sdkManager).getBuckets(accessToken, region, limit, startAt, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getBuckets Request completed successfully with status code: ${response.status}`);
                return new autodesk_sdkmanager_1.ApiResponse(response, response.data);
            }
            catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getBuckets Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new base_1.OssApiError(`getBuckets Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                }
                else if (error.request) {
                    this.logger.logError(`getBuckets Request failed with no response received: ${error.request}`);
                    throw new base_1.OssApiError(`getBuckets Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
exports.BucketsApi = BucketsApi;
