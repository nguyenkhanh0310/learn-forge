"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    constructor(level, enabled) {
        this.level = level !== null && level !== void 0 ? level : LogLevel.ERROR;
        this.enabled = enabled !== null && enabled !== void 0 ? enabled : true;
    }
    getLevelPriority(level) {
        switch (level) {
            case LogLevel.DEBUG:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.WARN:
                return 3;
            case LogLevel.ERROR:
                return 4;
            default:
                return 0;
        }
    }
    initLogger(level) {
        return (this.enabled &&
            this.getLevelPriority(level) >= this.getLevelPriority(this.level));
    }
    logDebug(message) {
        if (this.initLogger(LogLevel.DEBUG)) {
            console.debug(`DEBUG: ${message}`);
        }
    }
    logInfo(message) {
        if (this.initLogger(LogLevel.INFO)) {
            console.log(`INFO: ${message}`);
        }
    }
    logWarn(message) {
        if (this.initLogger(LogLevel.WARN)) {
            console.warn(`WARN: ${message}`);
        }
    }
    logError(message) {
        if (this.initLogger(LogLevel.ERROR)) {
            console.error(`ERROR: ${message}`);
        }
    }
    setEnabled(enabled) {
        this.enabled = enabled;
    }
}
exports.Logger = Logger;
