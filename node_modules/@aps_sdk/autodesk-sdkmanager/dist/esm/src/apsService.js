var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios, { AxiosError } from 'axios';
import { circuitBreaker, ConsecutiveBreaker, ExponentialBackoff, handleAll, handleType, retry, timeout, TimeoutStrategy, wrap } from 'cockatiel';
export class ApsService {
    constructor(config) {
        this.retryPolicy = this.createRetryPolicy(config);
        this.circuitBreakerPolicy = this.createCircuitBreakerPolicy(config);
        this.timeoutPolicy = this.createTimeoutPolicy(config);
        this.resiliencePolicy = wrap(this.circuitBreakerPolicy, this.retryPolicy, this.timeoutPolicy);
    }
    createRetryPolicy(config) {
        return retry(handleType(AxiosError, (err) => { var _a; return ApsService.RETRYABLE_STATUS_CODES.includes((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status); }).orWhen((err) => {
            // check if err quacks like an ISDKError
            return ('httpStatusCode' in err &&
                err.httpStatusCode instanceof Function &&
                ApsService.RETRYABLE_STATUS_CODES.includes(err.httpStatusCode()));
        }), {
            maxAttempts: config.retryCount,
            backoff: new ExponentialBackoff({
                maxDelay: config.backoffInterval
            })
        });
    }
    createCircuitBreakerPolicy(config) {
        return circuitBreaker(handleAll, {
            breaker: new ConsecutiveBreaker(config.retryCount),
            halfOpenAfter: config.circuitBreakerInterval
        });
    }
    createTimeoutPolicy(config) {
        return timeout(config.timeOutValue, TimeoutStrategy.Aggressive);
    }
    request(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.resiliencePolicy.execute(() => axios.request(config));
        });
    }
}
ApsService.RETRYABLE_STATUS_CODES = [408, 429, 502, 503, 504];
